// Code generated by MockGen. DO NOT EDIT.
// Source: github.go
//
// Generated by this command:
//
//	mockgen -source=github.go -destination=internal/mocks/github.go -package mocks -write_package_comment=false
//

package mocks

import (
	context "context"
	reflect "reflect"

	github "github.com/willabides/release-train/v3/internal/github"
	gomock "go.uber.org/mock/gomock"
)

// MockGithubClient is a mock of GithubClient interface.
type MockGithubClient struct {
	ctrl     *gomock.Controller
	recorder *MockGithubClientMockRecorder
	isgomock struct{}
}

// MockGithubClientMockRecorder is the mock recorder for MockGithubClient.
type MockGithubClientMockRecorder struct {
	mock *MockGithubClient
}

// NewMockGithubClient creates a new mock instance.
func NewMockGithubClient(ctrl *gomock.Controller) *MockGithubClient {
	mock := &MockGithubClient{ctrl: ctrl}
	mock.recorder = &MockGithubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGithubClient) EXPECT() *MockGithubClientMockRecorder {
	return m.recorder
}

// CompareCommits mocks base method.
func (m *MockGithubClient) CompareCommits(ctx context.Context, owner, repo, base, head string, count int) (*github.CommitComparison, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareCommits", ctx, owner, repo, base, head, count)
	ret0, _ := ret[0].(*github.CommitComparison)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompareCommits indicates an expected call of CompareCommits.
func (mr *MockGithubClientMockRecorder) CompareCommits(ctx, owner, repo, base, head, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareCommits", reflect.TypeOf((*MockGithubClient)(nil).CompareCommits), ctx, owner, repo, base, head, count)
}

// CreateRelease mocks base method.
func (m *MockGithubClient) CreateRelease(ctx context.Context, owner, repo, tag, body string, prerelease bool) (*github.RepoRelease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRelease", ctx, owner, repo, tag, body, prerelease)
	ret0, _ := ret[0].(*github.RepoRelease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRelease indicates an expected call of CreateRelease.
func (mr *MockGithubClientMockRecorder) CreateRelease(ctx, owner, repo, tag, body, prerelease any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelease", reflect.TypeOf((*MockGithubClient)(nil).CreateRelease), ctx, owner, repo, tag, body, prerelease)
}

// DeleteRelease mocks base method.
func (m *MockGithubClient) DeleteRelease(ctx context.Context, owner, repo string, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRelease", ctx, owner, repo, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRelease indicates an expected call of DeleteRelease.
func (mr *MockGithubClientMockRecorder) DeleteRelease(ctx, owner, repo, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelease", reflect.TypeOf((*MockGithubClient)(nil).DeleteRelease), ctx, owner, repo, id)
}

// GenerateReleaseNotes mocks base method.
func (m *MockGithubClient) GenerateReleaseNotes(ctx context.Context, owner, repo, tag, prevTag string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateReleaseNotes", ctx, owner, repo, tag, prevTag)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateReleaseNotes indicates an expected call of GenerateReleaseNotes.
func (mr *MockGithubClientMockRecorder) GenerateReleaseNotes(ctx, owner, repo, tag, prevTag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateReleaseNotes", reflect.TypeOf((*MockGithubClient)(nil).GenerateReleaseNotes), ctx, owner, repo, tag, prevTag)
}

// GetPullRequest mocks base method.
func (m *MockGithubClient) GetPullRequest(ctx context.Context, owner, repo string, number int) (*github.BasePull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequest", ctx, owner, repo, number)
	ret0, _ := ret[0].(*github.BasePull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequest indicates an expected call of GetPullRequest.
func (mr *MockGithubClientMockRecorder) GetPullRequest(ctx, owner, repo, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequest", reflect.TypeOf((*MockGithubClient)(nil).GetPullRequest), ctx, owner, repo, number)
}

// GetPullRequestCommits mocks base method.
func (m *MockGithubClient) GetPullRequestCommits(ctx context.Context, owner, repo string, number int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestCommits", ctx, owner, repo, number)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestCommits indicates an expected call of GetPullRequestCommits.
func (mr *MockGithubClientMockRecorder) GetPullRequestCommits(ctx, owner, repo, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestCommits", reflect.TypeOf((*MockGithubClient)(nil).GetPullRequestCommits), ctx, owner, repo, number)
}

// ListMergedPullsForCommit mocks base method.
func (m *MockGithubClient) ListMergedPullsForCommit(ctx context.Context, owner, repo, sha string) ([]github.BasePull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMergedPullsForCommit", ctx, owner, repo, sha)
	ret0, _ := ret[0].([]github.BasePull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMergedPullsForCommit indicates an expected call of ListMergedPullsForCommit.
func (mr *MockGithubClientMockRecorder) ListMergedPullsForCommit(ctx, owner, repo, sha any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMergedPullsForCommit", reflect.TypeOf((*MockGithubClient)(nil).ListMergedPullsForCommit), ctx, owner, repo, sha)
}

// PublishRelease mocks base method.
func (m *MockGithubClient) PublishRelease(ctx context.Context, owner, repo, makeLatest string, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishRelease", ctx, owner, repo, makeLatest, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishRelease indicates an expected call of PublishRelease.
func (mr *MockGithubClientMockRecorder) PublishRelease(ctx, owner, repo, makeLatest, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRelease", reflect.TypeOf((*MockGithubClient)(nil).PublishRelease), ctx, owner, repo, makeLatest, id)
}

// UploadAsset mocks base method.
func (m *MockGithubClient) UploadAsset(ctx context.Context, uploadURL, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadAsset", ctx, uploadURL, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadAsset indicates an expected call of UploadAsset.
func (mr *MockGithubClientMockRecorder) UploadAsset(ctx, uploadURL, filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadAsset", reflect.TypeOf((*MockGithubClient)(nil).UploadAsset), ctx, uploadURL, filename)
}
