name: release-train
description: release-train keeps a-rollin' down to San Antone
branding:
  icon: send
  color: yellow
inputs:
  repo:
    description: Github repository in the form of owner/repo.
    default: ${{ github.repository }}
  check-pr:
    description: |-
      Operates as if the given PR has already been merged. Useful for making sure the PR is properly labeled.
      Skips tag and release.
    default: ${{ github.event.number }}
  labels:
    description: |-
      PR label alias in the form of "<alias>=<label>" where <label> is a canonical label.

      Accepts multiple values. One value per line.
  checkout-dir:
    description: The directory where the repository is checked out.
    default: ${{ github.workspace }}
  ref:
    description: git ref.
    default: HEAD
  github-token:
    description: 'The GitHub token to use for authentication. Must have `contents: write` permission if creating a release or tag.'
    default: ${{ github.token }}
  create-tag:
    description: |-
      Whether to create a tag for the release.

      Only literal 'true' will be treated as true.
  create-release:
    description: |-
      Whether to create a release. Implies create-tag.

      Only literal 'true' will be treated as true.
  draft:
    description: |-
      Leave the release as a draft.

      Only literal 'true' will be treated as true.
  tag-prefix:
    description: The prefix to use for the tag.
    default: v
  v0:
    description: "Assert that current major version is 0 and treat breaking changes as minor changes. \nErrors if the major version is not 0.\n\nOnly literal 'true' will be treated as true."
  initial-release-tag:
    description: The tag to use if no previous version can be found. Set to "" to cause an error instead.
    default: v0.0.0
  pre-release-hook:
    description: |-
      Command to run before creating the release. You may abort the release by exiting with a non-zero exit code.

      Exit code 0 will continue the release. Exit code 10 will skip the release without error. Any other exit code will
      abort the release with an error.

      You may provide custom release notes by writing to the file at `$RELEASE_NOTES_FILE`:

      ```
        echo "my release notes" > "$RELEASE_NOTES_FILE"
      ```

      You can update the git ref to be released by writing it to the file at `$RELEASE_TARGET`:

      ```
        # ... update some files ...
        git commit -am "prepare release $RELEASE_TAG"
        echo "$(git rev-parse HEAD)" > "$RELEASE_TARGET"
      ```

      If you create a tag named $RELEASE_TAG, it will be used as the release target instead of either HEAD or the value
      written to $RELEASE_TARGET.

      Any files written to $ASSETS_DIR will be uploaded as release assets.

      The environment variables RELEASE_VERSION, RELEASE_TAG, PREVIOUS_VERSION, FIRST_RELEASE, GITHUB_TOKEN,
      RELEASE_NOTES_FILE, RELEASE_TARGET and ASSETS_DIR will be set.
  validate-go-module:
    description: |-
      Validates that the name of the go module at the given path matches the major version of the release. For example,
      validation will fail when releasing v3.0.0 when the module name is "my_go_module/v2".

      Accepts multiple values. One value per line.
  release-refs:
    description: |-
      Only allow tags and releases to be created from matching refs. Refs can be patterns accepted by git-show-ref.
      If undefined, any branch can be used.

      Accepts multiple values. One value per line.
  tempdir:
    description: The prefix to use with mktemp to create a temporary directory.
  debug:
    description: |-
      Enable debug logging.

      Only literal 'true' will be treated as true.
  release-train-bin:
    description: Path to release-train binary. Only needed if you're using a custom release-train binary.
outputs:
  previous-ref:
    value: ${{ steps.release.outputs.previous-ref }}
    description: A git ref pointing to the previous release, or the current ref if no previous release can be found.
  previous-version:
    value: ${{ steps.release.outputs.previous-version }}
    description: The previous version on the release branch.
  first-release:
    value: ${{ steps.release.outputs.first-release }}
    description: Whether this is the first release on the release branch. Either "true" or "false".
  release-version:
    value: ${{ steps.release.outputs.release-version }}
    description: The version of the new release. Empty if no release is called for.
  release-tag:
    value: ${{ steps.release.outputs.release-tag }}
    description: The tag of the new release. Empty if no release is called for.
  change-level:
    value: ${{ steps.release.outputs.change-level }}
    description: The level of change in the release. Either "major", "minor", "patch" or "none".
  created-tag:
    value: ${{ steps.release.outputs.created-tag }}
    description: Whether a tag was created. Either "true" or "false".
  created-release:
    value: ${{ steps.release.outputs.created-release }}
    description: Whether a release was created. Either "true" or "false".
  pre-release-hook-output:
    value: ${{ steps.release.outputs.pre-release-hook-output }}
    description: The stdout of the pre_release_hook. Empty if pre_release_hook is not set or if the hook returned an exit other than 0 or 10.
  pre-release-hook-aborted:
    value: ${{ steps.release.outputs.pre-release-hook-aborted }}
    description: Whether pre_release_hook issued an abort by exiting 10. Either "true" or "false".
runs:
  using: composite
  steps:
    - name: release
      id: release
      shell: sh
      run: |
        #!/bin/sh
        set -e

        ACTION_DIR="${{ github.action_path }}"
        RELEASE_TRAIN_BIN="$ACTION_DIR"/bin/release-train

        if [ -z "${{ inputs.release-train-bin }}" ]; then
          RELEASE_TRAIN_BIN="$ACTION_DIR"/script/release-train
        else
          RELEASE_TRAIN_BIN="${{ inputs.release-train-bin }}"
        fi

        set -- --output-format action --debug

        if [ -n "${{ inputs.repo }}" ]; then
          set -- "$@" --repo '${{ inputs.repo }}'
        fi

        if [ -n "${{ inputs.check-pr }}" ]; then
          set -- "$@" --check-pr '${{ inputs.check-pr }}'
        fi

        while IFS= read -r line; do
          [ -n "$line" ] || continue
          set -- "$@" --label "$line"
        done <<EOF
        ${{ inputs.labels }}
        EOF

        if [ -n "${{ inputs.checkout-dir }}" ]; then
          set -- "$@" --checkout-dir '${{ inputs.checkout-dir }}'
        fi

        if [ -n "${{ inputs.ref }}" ]; then
          set -- "$@" --ref '${{ inputs.ref }}'
        fi

        if [ -n "${{ inputs.github-token }}" ]; then
          set -- "$@" --github-token '${{ inputs.github-token }}'
        fi

        case "${{ inputs.create-tag }}" in
          true)
            set -- "$@" --create-tag
            ;;
          false) ;;
          "") ;;
          *)
            echo "Input create-tag must be 'true' or 'false'. Got '${{ inputs.create-tag }}'." >&2
            exit 1
        	;;
        esac

        case "${{ inputs.create-release }}" in
          true)
            set -- "$@" --create-release
            ;;
          false) ;;
          "") ;;
          *)
            echo "Input create-release must be 'true' or 'false'. Got '${{ inputs.create-release }}'." >&2
            exit 1
        	;;
        esac

        case "${{ inputs.draft }}" in
          true)
            set -- "$@" --draft
            ;;
          false) ;;
          "") ;;
          *)
            echo "Input draft must be 'true' or 'false'. Got '${{ inputs.draft }}'." >&2
            exit 1
        	;;
        esac

        if [ -n "${{ inputs.tag-prefix }}" ]; then
          set -- "$@" --tag-prefix '${{ inputs.tag-prefix }}'
        fi

        case "${{ inputs.v0 }}" in
          true)
            set -- "$@" --v0
            ;;
          false) ;;
          "") ;;
          *)
            echo "Input v0 must be 'true' or 'false'. Got '${{ inputs.v0 }}'." >&2
            exit 1
        	;;
        esac

        if [ -n "${{ inputs.initial-release-tag }}" ]; then
          set -- "$@" --initial-tag '${{ inputs.initial-release-tag }}'
        fi

        if [ -n "${{ inputs.pre-release-hook }}" ]; then
          set -- "$@" --pre-release-hook '${{ inputs.pre-release-hook }}'
        fi

        while IFS= read -r line; do
          [ -n "$line" ] || continue
          set -- "$@" --go-mod-file "$line"
        done <<EOF
        ${{ inputs.validate-go-module }}
        EOF

        while IFS= read -r line; do
          [ -n "$line" ] || continue
          set -- "$@" --release-ref "$line"
        done <<EOF
        ${{ inputs.release-refs }}
        EOF

        if [ -n "${{ inputs.tempdir }}" ]; then
          set -- "$@" --tempdir '${{ inputs.tempdir }}'
        fi

        case "${{ inputs.debug }}" in
          true)
            set -- "$@" --debug
            ;;
          false) ;;
          "") ;;
          *)
            echo "Input debug must be 'true' or 'false'. Got '${{ inputs.debug }}'." >&2
            exit 1
        	;;
        esac

        "$RELEASE_TRAIN_BIN" "$@"
