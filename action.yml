name: release-train
description: hop on the release train
branding:
  icon: send
  color: yellow

inputs:
  checkout_dir:
    description: The directory where the repository is checked out.
    default: ${{ github.workspace }}

  ref:
    description: The branch or tag to release.
    default: ${{ github.ref }}

  github_token:
    description: |
      The GitHub token to use for authentication. Must have `contents: write` permission if creating a release or tag.
    default: ${{ github.token }}

  create_tag:
    description: Whether to create a tag for the release. Any non-empty value will be treated as true.

  create_release:
    description: |
      Whether to create a release. Any non-empty value will be treated as true.
      
      Implies `create_tag`.

  tag_prefix:
    description: |
      The prefix to use for the tag. Defaults to `v`.
    default: v

  default_previous_version:
    description: |
      The default previous version to use if no previous version can be found. This is used to for the first release.
      
      Set to empty string to disable cause it to error if no previous version can be found.
    default: 0.0.0

  pre_release_hook:
    description: |
      Command to run before creating the release. You may abort the release by exiting with a non-zero exit code.
      
      Exit code 0 will continue the release. Exit code 10 will skip the release without error. Any other exit code will
      abort the release with an error.
      
      You may provide custom release notes by writing to the file at `$RELEASE_NOTES_FILE`:
      ```
      echo "my release notes" > "$RELEASE_NOTES_FILE"
      ```
      
      The environment variables `RELEASE_VERSION`, `RELEASE_TAG`, `PREVIOUS_VERSION`, `FIRST_RELEASE`, `GITHUB_TOKEN`,
      and `RELEASE_NOTES_FILE` will be set.

  post_release_hook:
    description: |
      Command to run after the release is complete. This is useful for adding artifacts to your release.
      
      The environment variables `RELEASE_VERSION`, `RELEASE_TAG`, `PREVIOUS_VERSION`, `FIRST_RELEASE` and `GITHUB_TOKEN` 
      will be set.

  release_notes:
    description: |
      The release notes to use for the release. If not provided, release notes will be generated by GitHub's release
      notes generator.

      Ignored unless create_release is set.
    deprecationMessage: Use `pre_release_hook` instead.

  validate_version:
    description: Alias for `pre_release_hook`.
    deprecationMessage: Use `pre_release_hook` instead.

outputs:
  previous_ref:
    value: ${{ steps.prev.outputs.ref }}
    description: |
      A git ref pointing to the previous release, or the current ref if no previous release can be found.

  previous_version:
    value: ${{ steps.prev.outputs.version }}
    description: |
      The previous version on the release branch.

  first_release:
    value: ${{ steps.prev.outputs.first_release }}
    description: |
      Whether this is the first release on the release branch. Either "true" or "false".

  release_version:
    value: ${{ steps.next.outputs.release_version }}
    description: |
      The version of the new release. Empty if no release is called for.

  release_tag:
    value: ${{ steps.next.outputs.release_tag }}
    description: |
      The tag of the new release. Empty if no release is called for.

runs:
  using: composite
  steps:
    - id: init
      shell: sh
      working-directory: ${{ inputs.checkout_dir }}
      env:
        VALIDATE_VERSION: ${{ inputs.validate_version }}
        PRE_RELEASE_HOOK: ${{ inputs.pre_release_hook }}
        RELEASE_NOTES: ${{ inputs.release_notes }}
      run: |
        if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
          echo "fatal: shallow clones are not supported" >&2
          exit 1
        fi
        if [ -n "$VALIDATE_VERSION" ] && [ -n "$PRE_RELEASE_HOOK" ]; then
          echo "fatal: cannot specify both validate_version and pre_release_hook" >&2
          exit 1
        fi
        PRE_RELEASE_HOOK_FILE="${{ runner.temp }}/pre_release_hook-${{ github.run_id }}-${{ github.run_attempt }}"
        echo "${PRE_RELEASE_HOOK}${VALIDATE_VERSION}" > "$PRE_RELEASE_HOOK_FILE"
        echo "pre_release_hook_file=$PRE_RELEASE_HOOK_FILE" > "$GITHUB_OUTPUT"
        
        RELEASE_NOTES_FILE="${{ runner.temp }}/release_notes-${{ github.run_id }}-${{ github.run_attempt }}"
        echo "$RELEASE_NOTES" > "$RELEASE_NOTES_FILE"
        echo "release_notes_file=$RELEASE_NOTES_FILE" >> "$GITHUB_OUTPUT"

    - id: prev
      shell: sh
      working-directory: ${{ inputs.checkout_dir }}
      env:
        REF: ${{ inputs.ref }}
        TAG_PREFIX: ${{ inputs.tag_prefix }}
        DEFAULT_PREVIOUS_VERSION: ${{ inputs.default_previous_version }}
      run: |
        "${{ github.action_path }}"/src/prev > $GITHUB_OUTPUT

    - id: next
      shell: sh
      working-directory: ${{ inputs.checkout_dir }}
      env:
        PREVIOUS_VERSION: ${{ steps.prev.outputs.version }}
        PREVIOUS_TAG: ${{ steps.prev.outputs.ref }}
        FIRST_RELEASE: ${{ steps.prev.outputs.first_release }}
        REF: ${{ inputs.ref }}
        REPO: ${{ github.repository }}
        TAG_PREFIX: ${{ inputs.tag_prefix }}
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        "${{ github.action_path }}"/src/next > $GITHUB_OUTPUT

    - name: pre release hook
      if: ${{ steps.next.outputs.release_version != '' && steps.next.outputs.release_tag != '' }}
      shell: sh
      working-directory: ${{ inputs.checkout_dir }}
      env:
        RELEASE_VERSION: ${{ steps.next.outputs.release_version }}
        RELEASE_TAG: ${{ steps.next.outputs.release_tag }}
        PREVIOUS_VERSION: ${{ steps.prev.outputs.version }}
        FIRST_RELEASE: ${{ steps.prev.outputs.first_release }}
        GITHUB_TOKEN: ${{ inputs.github_token }}
        RELEASE_NOTES_FILE: ${{ steps.init.outputs.release_notes_file }}
        PRE_RELEASE_HOOK_FILE: ${{ steps.init.outputs.pre_release_hook_file }}
      run: |
        chmod +x "${{ steps.init.outputs.pre_release_hook_file }}"
        "${{ steps.init.outputs.pre_release_hook_file }}"

    - name: create release
      shell: sh
      if: ${{ steps.next.outputs.release_version != '' && steps.next.outputs.release_tag != '' }}
      working-directory: ${{ inputs.checkout_dir }}
      env:
        CREATE_TAG: ${{ inputs.create_tag }}
        CREATE_RELEASE: ${{ inputs.create_release }}
        RELEASE_NOTES_FILE: ${{ steps.init.outputs.release_notes_file }}
        RELEASE_TAG: ${{ steps.next.outputs.release_tag }}
        PREVIOUS_TAG: ${{ steps.prev.outputs.ref }}
        REF: ${{ inputs.ref }}
        GH_TOKEN: ${{ inputs.github_token }}
        FIRST_RELEASE: ${{ steps.prev.outputs.first_release }}
      run: |
        "${{ github.action_path }}"/src/release

    - name: post release hook
      shell: sh
      if: ${{ steps.next.outputs.release_version != '' && steps.next.outputs.release_tag != '' && inputs.post_release_hook != '' }}
      working-directory: ${{ inputs.checkout_dir }}
      env:
        RELEASE_VERSION: ${{ steps.next.outputs.release_version }}
        RELEASE_TAG: ${{ steps.next.outputs.release_tag }}
        PREVIOUS_VERSION: ${{ steps.prev.outputs.version }}
        FIRST_RELEASE: ${{ steps.prev.outputs.first_release }}
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: ${{ inputs.post_release_hook }}
