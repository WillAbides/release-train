name: ci
on:
  push:
    branches: [ '*' ]
  workflow_dispatch:
  pull_request:
    types:
      - synchronize
      - opened
      - reopened
jobs:
  cibuild:
    name: cibuild
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      pull-requests: write
      statuses: write
    env:
      GITHUB_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: WillAbides/setup-go-faster@v1
        id: setup-go
        with:
          go-version: '1.20.x'
      - uses: actions/cache@v3
        with:
          path: |
            ${{ steps.setup-go.outputs.GOCACHE }}
            ${{ steps.setup-go.outputs.GOMODCACHE }}
          key: go-${{ runner.os }}-${{ hashFiles('go.*', '*.go', '.github/workflows/ci.yaml', 'script/*', 'action/*' ,'.bindown.yaml', '.goreleaser.yaml') }}
          restore-keys: go-${{ runner.os }}-
      - uses: tibdex/github-app-token@v1.8.0
        id: generate-token
        with:
          app_id: ${{ secrets.RELEASER_APP_ID }}
          private_key: ${{ secrets.RELEASER_APP_KEY }}
      - name: config
        id: config
        run: |
          git config --local user.name '${{ github.actor }}'
          git config --local user.email '${{ github.actor }}@users.noreply.github.com'
          go build -o bin/release-train .
          echo RELEASE_TRAIN_BIN="$(pwd)"/bin/release-train >> "$GITHUB_ENV"
          echo branch_name="${GITHUB_REF##*/}" >> "$GITHUB_OUTPUT"
      - run: script/cibuild
      - id: release-train
        name: release-train
        uses: './'
        with:
          labels: |
            enhancement=semver:minor
          create-release: true
          release-train-bin: ${{ env.RELEASE_TRAIN_BIN }}
          release-refs: |
            main
            refs/heads/v[0-9]
            refs/heads/v[0-9][0-9]
          pre-release-hook: |
            set -e
            script/check-module-version "$(go list -m)" "$RELEASE_TAG"
            script/bindown -q install goreleaser
            git tag "$RELEASE_TAG"
            bin/goreleaser release --clean --skip-publish
            cp dist/checksums.txt dist/release-train_*.tar.gz "$ASSETS_DIR"
      - name: echo output
        if: always()
        run: |
          cat <<EOF
          ${{ toJSON(steps.release-train.outputs) }}
          EOF
      - name: add bindown template
        if: steps.release-train.outputs.created-release == 'true'
        run: |
          script/bindown -q install gh
          script/bindown-template '${{ steps.release-train.outputs.release-tag }}' tmp/bindown/bindown.yaml
          bin/gh release upload "${{ steps.release-train.outputs.release-tag }}" tmp/bindown/bindown.yaml
